{"version":3,"sources":["usePullUpCounter.js","App.js","serviceWorker.js","index.js"],"names":["getKeypointsObject","pose","keypoints","reduce","acc","part","position","reducer","count","action","sensitivity","useReducer","dispatch","standard","useRef","checkPoses","useCallback","poses","length","leftShoulder","rightShoulder","leftElbow","rightElbow","leftWrist","rightWrist","leftHip","rightHip","elbow","shoulder","y","current","Math","max","hip","wrist","inferenceConfig","decodingMethod","App","usePullUpCounter","onEstimate","className","facingMode","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mQAEA,SAASA,EAAmBC,GAC1B,OAAOA,EAAKC,UAAUC,QAAO,SAACC,EAAD,GAA8B,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SAEzC,OADAF,EAAIC,GAAQC,EACLF,IACN,IAGL,SAASG,EAAQC,EAAOC,GACtB,MAAe,UAAXA,EAA2B,EACxBD,EAAQ,EAGF,iBAA4B,IAAnBE,EAAkB,uDAAJ,GAAI,EACdC,qBAAWJ,EAAS,GADN,mBACjCC,EADiC,KAC1BI,EAD0B,KAElCC,EAAWC,iBAAO,GAClBC,EAAaC,uBACjB,SAAAC,GACE,GAAqB,IAAjBA,EAAMC,OAAV,CADO,MAYHlB,EAAmBiB,EAAM,IAR3BE,EAJK,EAILA,aACAC,EALK,EAKLA,cACAC,EANK,EAMLA,UACAC,EAPK,EAOLA,WACAC,EARK,EAQLA,UACAC,EATK,EASLA,WACAC,EAVK,EAULA,QACAC,EAXK,EAWLA,SAGIC,EAAQN,GAAaC,EACrBM,EAAWT,GAAgBC,EACjC,GAAKO,GAAUC,EAGf,GADaA,EAASC,EAAIF,EAAME,EAE9BhB,EAASiB,QAAUC,KAAKC,IAAInB,EAASiB,QAASH,EAAME,OADtD,CAMA,GADWhB,EAASiB,QAAUH,EAAME,EAAInB,EAItC,OAFAE,EAAS,kBACTC,EAASiB,QAAU,GAIrB,IAAMG,EAAMR,GAAWC,EACjBQ,EAAQX,GAAaC,EAC3B,GAAKS,GAAQC,EACAA,EAAML,EAAInB,EAAcuB,EAAIJ,GAC/BjB,EAAS,aAErB,CAACF,IAEH,MAAO,CAACF,EAAOO,ICpDXoB,EAAkB,CACtBC,eAAgB,iBAoBHC,MAjBf,WAAgB,IAAD,EACeC,IADf,mBACN9B,EADM,KACCO,EADD,KAEPwB,EAAavB,uBAAY,SAAAC,GAAK,OAAIF,EAAWE,KAAQ,CAACF,IAE5D,OACE,oCACE,qDAAuBP,IACvB,kBAAC,IAAD,CACEgC,UAAU,aACVC,WAAW,cACXN,gBAAiBA,EACjBI,WAAYA,MCPAG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.31a17998.chunk.js","sourcesContent":["import { useRef, useReducer, useCallback } from \"react\"\n\nfunction getKeypointsObject(pose) {\n  return pose.keypoints.reduce((acc, { part, position }) => {\n    acc[part] = position\n    return acc\n  }, {})\n}\n\nfunction reducer(count, action) {\n  if (action === \"reset\") return 0\n  return count + 1\n}\n\nexport default function(sensitivity = 10) {\n  const [count, dispatch] = useReducer(reducer, 0)\n  const standard = useRef(0)\n  const checkPoses = useCallback(\n    poses => {\n      if (poses.length !== 1) return\n\n      const {\n        leftShoulder,\n        rightShoulder,\n        leftElbow,\n        rightElbow,\n        leftWrist,\n        rightWrist,\n        leftHip,\n        rightHip\n      } = getKeypointsObject(poses[0])\n\n      const elbow = leftElbow || rightElbow\n      const shoulder = leftShoulder || rightShoulder\n      if (!elbow || !shoulder) return\n\n      const down = shoulder.y > elbow.y\n      if (down) {\n        standard.current = Math.max(standard.current, elbow.y)\n        return\n      }\n\n      const up = standard.current > elbow.y + sensitivity\n      if (up) {\n        dispatch(\"increment\")\n        standard.current = 0\n        return\n      }\n\n      const hip = leftHip || rightHip\n      const wrist = leftWrist || rightWrist\n      if (!hip || !wrist) return\n      const rest = wrist.y + sensitivity > hip.y\n      if (rest) dispatch(\"reset\")\n    },\n    [sensitivity]\n  )\n  return [count, checkPoses]\n}\n","import \"regenerator-runtime/runtime\"\nimport React, { useCallback } from \"react\"\nimport PoseNet from \"react-posenet\"\nimport usePullUpCounter from \"./usePullUpCounter\"\n\nconst inferenceConfig = {\n  decodingMethod: \"single-person\"\n}\n\nfunction App() {\n  const [count, checkPoses] = usePullUpCounter()\n  const onEstimate = useCallback(poses => checkPoses(poses), [checkPoses])\n\n  return (\n    <>\n      <h1>{`Pull up count: ${count}`}</h1>\n      <PoseNet\n        className=\"min-vh-100\"\n        facingMode=\"environment\"\n        inferenceConfig={inferenceConfig}\n        onEstimate={onEstimate}\n      />\n    </>\n  )\n}\n\nexport default App\n","/* eslint-disable */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport App from \"./App\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(<App />, document.getElementById(\"root\"))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}